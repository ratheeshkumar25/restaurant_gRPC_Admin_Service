// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: admin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminService_AdminLogin_FullMethodName    = "/pbA.AdminService/AdminLogin"
	AdminService_CreateMenu_FullMethodName    = "/pbA.AdminService/CreateMenu"
	AdminService_FetchByMenuID_FullMethodName = "/pbA.AdminService/FetchByMenuID"
	AdminService_FetchByName_FullMethodName   = "/pbA.AdminService/FetchByName"
	AdminService_FetchMenus_FullMethodName    = "/pbA.AdminService/FetchMenus"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminLogin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	CreateMenu(ctx context.Context, in *AMenuItem, opts ...grpc.CallOption) (*AdminResponse, error)
	FetchByMenuID(ctx context.Context, in *AMenuBYId, opts ...grpc.CallOption) (*AMenuItem, error)
	FetchByName(ctx context.Context, in *AMenuBYName, opts ...grpc.CallOption) (*AMenuItem, error)
	FetchMenus(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*AMenuList, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminLogin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateMenu(ctx context.Context, in *AMenuItem, opts ...grpc.CallOption) (*AdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FetchByMenuID(ctx context.Context, in *AMenuBYId, opts ...grpc.CallOption) (*AMenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AMenuItem)
	err := c.cc.Invoke(ctx, AdminService_FetchByMenuID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FetchByName(ctx context.Context, in *AMenuBYName, opts ...grpc.CallOption) (*AMenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AMenuItem)
	err := c.cc.Invoke(ctx, AdminService_FetchByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FetchMenus(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*AMenuList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AMenuList)
	err := c.cc.Invoke(ctx, AdminService_FetchMenus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminLogin(context.Context, *AdminRequest) (*AdminResponse, error)
	CreateMenu(context.Context, *AMenuItem) (*AdminResponse, error)
	FetchByMenuID(context.Context, *AMenuBYId) (*AMenuItem, error)
	FetchByName(context.Context, *AMenuBYName) (*AMenuItem, error)
	FetchMenus(context.Context, *AdminNoParam) (*AMenuList, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminLogin(context.Context, *AdminRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServiceServer) CreateMenu(context.Context, *AMenuItem) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServiceServer) FetchByMenuID(context.Context, *AMenuBYId) (*AMenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByMenuID not implemented")
}
func (UnimplementedAdminServiceServer) FetchByName(context.Context, *AMenuBYName) (*AMenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByName not implemented")
}
func (UnimplementedAdminServiceServer) FetchMenus(context.Context, *AdminNoParam) (*AMenuList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMenus not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLogin(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMenuItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateMenu(ctx, req.(*AMenuItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FetchByMenuID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMenuBYId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FetchByMenuID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FetchByMenuID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FetchByMenuID(ctx, req.(*AMenuBYId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FetchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMenuBYName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FetchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FetchByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FetchByName(ctx, req.(*AMenuBYName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FetchMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FetchMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_FetchMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FetchMenus(ctx, req.(*AdminNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbA.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminService_AdminLogin_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _AdminService_CreateMenu_Handler,
		},
		{
			MethodName: "FetchByMenuID",
			Handler:    _AdminService_FetchByMenuID_Handler,
		},
		{
			MethodName: "FetchByName",
			Handler:    _AdminService_FetchByName_Handler,
		},
		{
			MethodName: "FetchMenus",
			Handler:    _AdminService_FetchMenus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
